<!DOCTYPE html>
<!-- saved from url=(0039)http://desandro.github.io/imagesloaded/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">

  <title>ImagesLoaded</title>

  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Montserrat:400,700">
  <link rel="stylesheet" href="http://desandro.github.io/imagesloaded/assets/styles.css">

</head>
<body>

  <div id="fork-me"><a href="https://github.com/desandro/imagesloaded">Fork me on GitHub</a></div>

  <div id="content">
    <h1>imagesLoaded</h1>
<p class="tagline">JavaScript is all like "You images done yet or what?"</p>

<p><a href="./ImagesLoaded_files/ImagesLoaded.htm">desandro.github.io/imagesloaded</a></p>
<p>Detect when images have been loaded.</p>
<h2>Demo</h2>

<div id="demo">
  <div id="status" style="opacity: 0;">
    <progress max="7" value="7"></progress>
  </div>
  <p>
    <button id="add">Add images</button>
    <button id="reset">Reset demo</button>
  </p>
  <div id="image-container"><li class=""><img src="./ImagesLoaded_files/saved_resource"></li><li class=""><img src="./ImagesLoaded_files/saved_resource(1)"></li><li class=""><img src="./ImagesLoaded_files/saved_resource(2)"></li><li class=""><img src="./ImagesLoaded_files/saved_resource(3)"></li><li class=""><img src="./ImagesLoaded_files/saved_resource(4)"></li><li class=""><img src="./ImagesLoaded_files/saved_resource(5)"></li><li class=""><img src="./ImagesLoaded_files/saved_resource(6)"></li></div>
</div>

<p><a href="http://codepen.io/desandro/pen/hlzaw">Edit this example on CodePen</a> or try the <a href="http://codepen.io/desandro/pen/bIFyl">jQuery example</a>.</p>

<p>Just to keep things interesting, thereâ€™s a 10% chance of adding a broken image.</p>


<h2>Install</h2>
<p>Get a packaged source file:</p>
<ul>
<li><a href="./ImagesLoaded_files/imagesloaded.pkgd.min.js">imagesloaded.pkgd.min.js</a></li>
<li><a href="http://desandro.github.io/imagesloaded/imagesloaded.pkgd.js">imagesloaded.pkgd.js</a></li>
</ul>
<p>Or install via <a href="http://bower.io/">Bower</a>:</p>
<pre><code class="lang-bash">bower install imagesloaded</code></pre>
<h2>Usage</h2>
<pre><code class="lang-js">imagesLoaded( elem, callback )
<span class="comment">// you can use `new` if you like</span>
<span class="keyword">new</span> imagesLoaded( elem, callback )</code></pre>
<ul>
<li><code>elem</code> <em>Element, NodeList, Array, or Selector String</em></li>
<li><code>callback</code> <em>Function</em> - function triggered after all images have been loaded</li>
</ul>
<p>Using a callback function is the same as binding it to the <code>always</code> event (see below).</p>
<pre><code class="lang-js"><span class="comment">// element</span>
imagesLoaded( document.querySelector(<span class="string">'#container'</span>), <span class="keyword">function</span>( instance ) {
  console.log(<span class="string">'all images are loaded'</span>);
});
<span class="comment">// selector string</span>
imagesLoaded( <span class="string">'#container'</span>, <span class="keyword">function</span>() {...});
<span class="comment">// multiple elements</span>
<span class="keyword">var</span> posts = document.querySelectorAll(<span class="string">'.post'</span>);
imagesLoaded( posts, <span class="keyword">function</span>() {...});</code></pre>
<h2>Events</h2>
<p>imagesLoaded is an Event Emitter. You can bind event listeners to events.</p>
<pre><code class="lang-js"><span class="keyword">var</span> imgLoad = imagesLoaded( elem );
<span class="function"><span class="keyword">function</span> <span class="title">onAlways</span><span class="params">( instance )</span> {</span>
  console.log(<span class="string">'all images are loaded'</span>);
}
<span class="comment">// bind with .on()</span>
imgLoad.on( <span class="string">'always'</span>, onAlways );
<span class="comment">// unbind with .off()</span>
imgLoad.off( <span class="string">'always'</span>, onAlways );</code></pre>
<h3>always</h3>
<pre><code class="lang-js">imgLoad.on( <span class="string">'always'</span>, <span class="keyword">function</span>( instance ) {
  console.log(<span class="string">'ALWAYS - all images have been loaded'</span>);
});</code></pre>
<p>Triggered after all images have been either loaded or confirmed broken.</p>
<ul>
<li><code>instance</code> <em>imagesLoaded</em> - the imagesLoaded instance</li>
</ul>
<h3>done</h3>
<pre><code class="lang-js">imgLoad.on( <span class="string">'done'</span>, <span class="keyword">function</span>( instance ) {
  console.log(<span class="string">'DONE  - all images have been successfully loaded'</span>);
});</code></pre>
<p>Triggered after all images have successfully loaded without any broken images.</p>
<h3>fail</h3>
<pre><code class="lang-js">imgLoad.on( <span class="string">'fail'</span>, <span class="keyword">function</span>( instance ) {
  console.log(<span class="string">'FAIL - all images loaded, at least one is broken'</span>);
});</code></pre>
<p>Triggered after all images have been loaded with at least one broken image.</p>
<h3>progress</h3>
<pre><code class="lang-js">imgLoad.on( <span class="string">'progress'</span>, <span class="keyword">function</span>( instance, image ) {
  <span class="keyword">var</span> result = image.isLoaded ? <span class="string">'loaded'</span> : <span class="string">'broken'</span>;
  console.log( <span class="string">'image is '</span> + result + <span class="string">' for '</span> + image.img.src );
});</code></pre>
<p>Triggered after each image has been loaded.</p>
<ul>
<li><code>instance</code> <em>imagesLoaded</em> - the imagesLoaded instance</li>
<li><code>image</code> <em>LoadingImage</em> - the LoadingImage instance of the loaded image</li>
</ul>
<h2>Properties</h2>
<h3>LoadingImage.img</h3>
<p><em>Image</em> - The <code>img</code> element</p>
<h3>LoadingImage.isLoaded</h3>
<p><em>Boolean</em> - <code>true</code> when the image has succesfully loaded</p>
<h3>imagesLoaded.images</h3>
<p>Array of <em>LoadingImage</em> instances for each image detected</p>
<pre><code class="lang-js"><span class="keyword">var</span> imgLoad = imagesLoaded(<span class="string">'#container'</span>);
imgLoad.on( <span class="string">'always'</span>, <span class="keyword">function</span>() {
  console.log( imgLoad.images.length + <span class="string">' images loaded'</span> );
  <span class="comment">// detect which image is broken</span>
  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, len = imgLoad.images.length; i &lt; len; i++ ) {
    <span class="keyword">var</span> image = imgLoad.images[i];
    <span class="keyword">var</span> result = image.isLoaded ? <span class="string">'loaded'</span> : <span class="string">'broken'</span>;
    console.log( <span class="string">'image is '</span> + result + <span class="string">' for '</span> + image.img.src );
  }
});</code></pre>
<h2>jQuery</h2>
<p>If you include jQuery, imagesLoaded can be used as a jQuery Plugin.</p>
<pre><code class="lang-js">$(<span class="string">'#container'</span>).imagesLoaded( <span class="keyword">function</span>() {
  <span class="comment">// images have loaded</span>
});</code></pre>
<h3>jQuery Deferred</h3>
<p>The jQuery plugin returns a <a href="http://api.jquery.com/category/deferred-object/">jQuery Deferred object</a>. This allows you to use <code>.always()</code>, <code>.done()</code>, <code>.fail()</code> and <code>.progress()</code>, similarly to the emitted events.</p>
<pre><code class="lang-js">$(<span class="string">'#container'</span>).imagesLoaded()
  .always( <span class="keyword">function</span>( instance ) {
    console.log(<span class="string">'all images loaded'</span>);
  })
  .done( <span class="keyword">function</span>( instance ) {
    console.log(<span class="string">'all images successfully loaded'</span>);
  })
  .fail( <span class="keyword">function</span>() {
    console.log(<span class="string">'all images loaded, at least one is broken'</span>);
  })
  .progress( <span class="keyword">function</span>( instance, image ) {
    <span class="keyword">var</span> result = image.isLoaded ? <span class="string">'loaded'</span> : <span class="string">'broken'</span>;
    console.log( <span class="string">'image is '</span> + result + <span class="string">' for '</span> + image.img.src );
  });</code></pre>
<h2>RequireJS</h2>
<p>imagesLoaded works with RequireJS.</p>
<ol>
<li>Install imagesLoaded and its dependencies</li>
<li>Update your <a href="http://requirejs.org/docs/api.html#config-paths">RequireJS paths config</a> so it can find those modules</li>
</ol>
<pre><code class="lang-js">requirejs.config({
  paths: {
    <span class="string">"eventie"</span>: <span class="string">"bower_components/eventie"</span>,
    <span class="string">"eventEmitter"</span>: <span class="string">"bower_components/eventEmitter"</span>
  }
});</code></pre>
<h2>Contributors</h2>
<p>This project has a <a href="https://github.com/desandro/imagesloaded/graphs/contributors">storied legacy</a>. Its current incarnation was developed by <a href="http://darsa.in/">Tomas Sardyha @Darsain</a> and <a href="http://desandro.com/">David DeSandro @desandro</a>.</p>
<h2>MIT License</h2>
<p>imagesLoaded is released under the <a href="http://desandro.mit-license.org/">MIT License</a>. Have at it.</p>

  </div>

<script src="./ImagesLoaded_files/imagesloaded.pkgd.min.js"></script>
<script src="./ImagesLoaded_files/scripts.js"></script>



</body></html>